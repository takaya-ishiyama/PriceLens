



type ItemSchema {
	id: String!
	name: String!
	organizationId: String!
}

type Mutation {
	createOrganization(
		"""
		name of object
		"""
		name: String!,
		"""
		organization_type of object
		"""
		organizationType: String!,
		"""
		private_key of object
		"""
		privateKey: String
	): OrganizationSchema!
	createItem(
		"""
		item name
		"""
		name: String!,
		"""
		item organization_id
		"""
		organizationId: String!
	): ItemSchema!
}

type OrganizationSchema {
	id: String!
	name: String!
	organizationType: OrganizationType!
}

type OrganizationSchemaConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [OrganizationSchemaEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [OrganizationSchema!]!
}

"""
An edge in a connection.
"""
type OrganizationSchemaEdge {
	"""
	The item at the end of the edge
	"""
	node: OrganizationSchema!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum OrganizationType {
	PUBLIC
	PRIVATE
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type Query {
	currentToken: String
	organizationFindOne(
		"""
		id of object
		"""
		id: ID!
	): OrganizationSchema!
	organizationFindManyByName(
		"""
		name
		"""
		name: String!
	): [OrganizationSchema!]!
	organizationFindAllWithPagenate(
		"""
		after
		"""
		after: String,
		"""
		before
		"""
		before: String,
		"""
		first
		"""
		first: Int,
		"""
		last
		"""
		last: Int
	): OrganizationSchemaConnection!
}


schema {
	query: Query
	mutation: Mutation
}
